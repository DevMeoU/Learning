[1/9] Performing build step for 'bootloader'
[1/1] C:\WINDOWS\system32\cmd.exe /C "cd /D E:\Workspace\Learning\ESP32\RTOS\SmartHome\build\bootloader\esp-idf\esptool_py && C:\esp\tools_directory\python_env\idf5.4_py3.10_env\Scripts\python.exe C:/esp/container_directory/v5.4.1/esp-idf/components/partition_table/check_sizes.py --offset 0x8000 bootloader 0x1000 E:/Workspace/Learning/ESP32/RTOS/SmartHome/build/bootloader/bootloader.bin"
Bootloader binary size 0x6920 bytes. 0x6e0 bytes (6%) free.
[2/9] No install step for 'bootloader'
[3/9] Completed 'bootloader'
[4/9] Building C object esp-idf/main/CMakeFiles/__idf_main.dir/apmode_cfg.c.obj
[5/9] Linking C static library esp-idf\main\libmain.a
[6/9] Generating ld/sections.ld
[7/9] Linking CXX executable SmartHome.elf
[8/9] Generating binary image from built executable
esptool.py v4.8.1
Creating esp32 image...
Merged 2 ELF sections
Successfully created esp32 image.
Generated E:/Workspace/Learning/ESP32/RTOS/SmartHome/build/SmartHome.bin
[9/9] C:\WINDOWS\system32\cmd.exe /C "cd /D E:\Workspace\Learning\ESP32\RTOS\SmartHome\build\esp-idf\esptool_py && C:\esp\tools_directory\python_env\idf5.4_py3.10_env\Scripts\python.exe C:/esp/container_directory/v5.4.1/esp-idf/components/partition_table/check_sizes.py --offset 0x8000 partition --type app E:/Workspace/Learning/ESP32/RTOS/SmartHome/build/partition_table/partition-table.bin E:/Workspace/Learning/ESP32/RTOS/SmartHome/build/SmartHome.bin"
SmartHome.bin binary size 0xe6e50 bytes. Smallest app partition is 0x100000 bytes. 0x191b0 bytes (10%) free.
